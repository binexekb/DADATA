
Функция ОтправитьЗапрос(пЗапросЖСОН) 
	АпиКлюч = Константы.АпиКлюч.Получить();
	СекретныйКлюч = Константы.СекретныйКлюч.Получить();
	
	ХТТПЗапрос = Новый HTTPЗапрос();
	ХТТПЗапрос.АдресРесурса = "/api/v2/clean";
	ХТТПЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	ХТТПЗапрос.Заголовки.Вставить("Authorization", "Token " + АпиКлюч);
	ХТТПЗапрос.Заголовки.Вставить("X-Secret", СекретныйКлюч);

	ХТТПЗапрос.УстановитьТелоИзСтроки(пЗапросЖСОН, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Соединение = Новый HTTPСоединение("dadata.ru",,,,Новый ИнтернетПрокси,, Новый ЗащищенноеСоединениеOpenSSL);
	ОтветHTTP = Соединение.ОтправитьДляОбработки(ХТТПЗапрос);
	Ответ = ОтветHTTP.ПолучитьТелоКакСтроку();	
	
	Возврат Ответ;
КонецФункции
 
Функция ПолучитьСтрокуЗапросаЖСОН150(пАдреса) 
	Если пАдреса.Количество() > 150 Тогда
		ВызватьИсключение("Превышение максимального количества адресов! ");
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Адреса.Код,
		|	Адреса.Ссылка,
		|	Адреса.ИсходныйАдрес
		|ИЗ
		|	Справочник.Адреса КАК Адреса
		|ГДЕ
		|	Адреса.Ссылка В(&пАдреса)";
	
	Запрос.УстановитьПараметр("пАдреса", пАдреса);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	КоличествоАдресовВЗаписи = 3;
	
	ЭтоНоваяЗапись = Истина;
	НомерЭлемента = 1;
	ИндексКолонкиВЗаписи = 0;
	лМассивДанных = Новый Массив;	// Пакет, максимум 50 записей
	
	Пока Выборка.Следующий() Цикл
		Если ИндексКолонкиВЗаписи >= КоличествоАдресовВЗаписи Тогда
			ИндексКолонкиВЗаписи = 0;
		КонецЕсли; 
		
		Если ЭтоНоваяЗапись Тогда
			лДанные = Новый Массив;
			
			Для лСч = 1 По КоличествоАдресовВЗаписи Цикл
				лДанные.Добавить();	// Код адреса 1
				лДанные.Добавить(); // Адрес 1
			КонецЦикла; 
			
			ЭтоНоваяЗапись = Ложь;
		КонецЕсли; 
		
		лДанные[ИндексКолонкиВЗаписи * 2] = Выборка.Код;
		лДанные[ИндексКолонкиВЗаписи * 2 + 1] = Выборка.ИсходныйАдрес;
		ИндексКолонкиВЗаписи = ИндексКолонкиВЗаписи + 1;
		
		// Добавляем запись в массив если кратно трём, или больше нет адресов для отправки.
		ДобавитьЗапись = (НомерЭлемента = Выборка.Количество())
							ИЛИ(ИндексКолонкиВЗаписи >= КоличествоАдресовВЗаписи);
		
		Если ДобавитьЗапись Тогда
			лМассивДанных.Добавить(лДанные);
			ЭтоНоваяЗапись = Истина;
		КонецЕсли;
		
		НомерЭлемента = НомерЭлемента + 1;
	КонецЦикла;
	
	лСтруктураЗаписи = Новый Массив;
	Для лСч = 1 По КоличествоАдресовВЗаписи Цикл
		лСтруктураЗаписи.Добавить("AS_IS");
		лСтруктураЗаписи.Добавить("ADDRESS");
	КонецЦикла; 
	
	лЗапрос = Новый Структура("structure,data",лСтруктураЗаписи,лМассивДанных);
	
	лЗаписьЖСОН = Новый ЗаписьJSON;
	лЗаписьЖСОН.УстановитьСтроку();
	ЗаписатьJSON(лЗаписьЖСОН,лЗапрос);
	лРезультат = лЗаписьЖСОН.Закрыть();
	
	Возврат лРезультат
КонецФункции

Функция ПолучитьСоответсвияРеквизитовАдресов() 
	
	лСоот = Новый Соответствие;
	//лСоот.Вставить("source","ИсходныйАдрес");
	лСоот.Вставить("result","СтандартизованныйАдрес");
	лСоот.Вставить("postal_code","Индекс");
	лСоот.Вставить("country","Страна");
	лСоот.Вставить("region_fias_id","ФиасКодРегиона");
	лСоот.Вставить("region_kladr_id","КладрКодРегиона");
	лСоот.Вставить("region_with_type","РегионСТипом");
	лСоот.Вставить("region_type","ТипРегионаСокр");
	лСоот.Вставить("region_type_full","ТипРегиона");
	лСоот.Вставить("region","Регион");
	лСоот.Вставить("area_fias_id","ФиасКодРайонаВРегионе");
	лСоот.Вставить("area_kladr_id","КладрКодРайонаВРегионе");
	лСоот.Вставить("area_with_type","РайонВРегионеСТипом");
	лСоот.Вставить("area_type","ТипРайонаВРегионеСокр");
	лСоот.Вставить("area_type_full","ТипРайонаВРегионе");
	лСоот.Вставить("area","РайонВРегионе");
	лСоот.Вставить("city_fias_id","ФиасКодГорода");
	лСоот.Вставить("city_kladr_id","КладрКодГорода");
	лСоот.Вставить("city_with_type","ГородСТипом");
	лСоот.Вставить("city_type","ТипГородаСокр");
	лСоот.Вставить("city_type_full","ТипГорода");
	лСоот.Вставить("city","Город");
	лСоот.Вставить("city_area","АдминистративныйОкруг");
	лСоот.Вставить("city_district","РайонГорода");
	лСоот.Вставить("settlement_fias_id","ФиасКодНасПункта");
	лСоот.Вставить("settlement_kladr_id","КладрКодНасПункта");
	лСоот.Вставить("settlement_with_type","НасПунктСТипом");
	лСоот.Вставить("settlement_type","ТипНасПунктаСокр");
	лСоот.Вставить("settlement_type_full","ТипНасПункта");
	лСоот.Вставить("settlement","НасПункт");
	лСоот.Вставить("street_fias_id","ФиасКодУлицы");
	лСоот.Вставить("street_kladr_id","КладрКодУлицы");
	лСоот.Вставить("street_with_type","УлицаСТипом");
	лСоот.Вставить("street_type","ТипУлицыСокр");
	лСоот.Вставить("street_type_full","ТипУлицы");
	лСоот.Вставить("street","Улица");
	лСоот.Вставить("house_fias_id","ФиасКодДома");
	лСоот.Вставить("house_kladr_id","КладрКодДома");
	лСоот.Вставить("house_type","ТипДомаСокр");
	лСоот.Вставить("house_type_full","ТипДома");
	лСоот.Вставить("house","Дом");
	лСоот.Вставить("block_type","ТипКорпусаСокр");
	лСоот.Вставить("block_type_full","ТипКорпуса");
	лСоот.Вставить("block","Корпус");
	лСоот.Вставить("flat_type","ТипКвартирыСокр");
	лСоот.Вставить("flat_type_full","ТипКвартиры");
	лСоот.Вставить("flat","Квартира");
	//лСоот.Вставить("flat_area","__________");
	//лСоот.Вставить("square_meter_price","__________");
	//лСоот.Вставить("flat_price","__________");
	лСоот.Вставить("postal_box","АбонентскийЯщик");
	лСоот.Вставить("fias_id","ФиасКод");
	лСоот.Вставить("fias_level","ФиасУровеньДетализации");
	лСоот.Вставить("kladr_id","КладрКод");
	лСоот.Вставить("capital_marker","СтатусЦентра");
	лСоот.Вставить("okato","КодОкато");
	лСоот.Вставить("oktmo","КодОктмо");
	//лСоот.Вставить("tax_office","__________");
	//лСоот.Вставить("tax_office_legal","__________");
	//лСоот.Вставить("timezone","__________");
	лСоот.Вставить("geo_lat","КоордШирота");
	лСоот.Вставить("geo_lon","КоордДолгота");
	//лСоот.Вставить("beltway_hit","__________");
	//лСоот.Вставить("beltway_distance","__________");
	лСоот.Вставить("qc_geo","КодТочностиКоординат");
	//лСоот.Вставить("qc_complete","__________");
	лСоот.Вставить("qc_house","ФиасНаличиеДома");
	лСоот.Вставить("qc","КодПроверкиАдреса");
	лСоот.Вставить("unparsed_parts","НераспознаннаяЧастьАдреса");
	
	Возврат лСоот;
КонецФункции
 
// Ограничения сервиса максимум 50 записей по 3 адреса
Процедура РаспознатьЧерезСервисДадата150(пАдреса) Экспорт
	
	лСоот = ПолучитьСоответсвияРеквизитовАдресов();
	
	лСтрокаЖСОН = ПолучитьСтрокуЗапросаЖСОН150(пАдреса);
	
	лОтветЖСОН = ОтправитьЗапрос(лСтрокаЖСОН);
	
	ЧтениеЖСОН = Новый ЧтениеJSON;
	ЧтениеЖСОН.УстановитьСтроку(лОтветЖСОН);
	
	ОтветСтруктурой = ПрочитатьJSON(ЧтениеЖСОН);
	
	лМассивЗаписей = ОтветСтруктурой.data;	// в записи по три адреса
	
	Для каждого лЗапись Из лМассивЗаписей Цикл
		
		Для каждого лКолонкаЗаписи Из лЗапись Цикл
			Для лСч = 0 По 2 Цикл
				лКодАдреса = лЗапись[лСч * 2].source;
				лРезультатРаспознания = лЗапись[лСч * 2 + 1];
				
				лТекущийАдрес = Справочники.Адреса.НайтиПоКоду(лКодАдреса);
				Если ЗначениеЗаполнено(лТекущийАдрес) Тогда
					лТекущийАдрес = лТекущийАдрес.ПолучитьОбъект();
					лТекущийАдрес.ДополнительныеСвойства.Вставить("РаскидатьПоРегионам");
					
					лЗаполняемыеРеквизитыАдреса = Новый Структура;
					
					Для каждого лРеквизит Из лСоот Цикл
						лЗначениеСвойства = Неопределено;
						Если лРезультатРаспознания.Свойство(лРеквизит.Ключ,лЗначениеСвойства) Тогда
							лЗаполняемыеРеквизитыАдреса.Вставить(лРеквизит.Значение,лЗначениеСвойства);
						КонецЕсли; 
					КонецЦикла; 
					
					ЗаполнитьЗначенияСвойств(лТекущийАдрес,лЗаполняемыеРеквизитыАдреса);
					лТекущийАдрес.ДатаЗапросаДадата = ТекущаяДата();
					
					лТекущийАдрес.Записать();
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры
